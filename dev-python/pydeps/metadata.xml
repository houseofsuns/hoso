<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="person">
		<email>gentoo@houseofsuns.org</email>
		<name>Markus Walter</name>
	</maintainer>
	<longdescription>pydeps======.. image:: https://readthedocs.org/projects/pydeps/badge/?version=latest   :target: https://readthedocs.org/projects/pydeps/?badge=latest   :alt: Documentation Status.. image:: https://github.com/thebjorn/pydeps/actions/workflows/ci-cd.yml/badge.svg   :target: https://github.com/thebjorn/pydeps/actions/workflows/ci-cd.yml.. image:: https://codecov.io/gh/thebjorn/pydeps/branch/master/graph/badge.svg?token=VsYwrSFcJa   :target: https://codecov.io/gh/thebjorn/pydeps.. image:: https://pepy.tech/badge/pydeps   :target: https://pepy.tech/project/pydeps   :alt: DownloadsPython module dependency visualization.This package is primarly intended to be used from the command line through the``pydeps`` command... contents::   :depth: 2**Feature requests and bug reports:**Please report bugs and feature requests on GitHub athttps://github.com/thebjorn/pydeps/issuesHow to install--------------::    pip install pydepsTo create graphs with ``pydeps`` you also need to install Graphviz_. Please follow theinstallation instructions provided in the Graphviz link (and makesure the ``dot`` command is on your path).Usage------------------::    usage: pydeps [-h] [--debug] [--config FILE] [--no-config] [--version]                  [-L LOG] [-v] [-o file] [-T FORMAT] [--display PROGRAM]                  [--noshow] [--show-deps] [--show-raw-deps] [--show-dot]                  [--nodot] [--no-output] [--show-cycles] [--debug-mf INT]                  [--noise-level INT] [--max-bacon INT] [--pylib] [--pylib-all]                  [--include-missing] [-x PATTERN [PATTERN ...]]                  [-xx MODULE [MODULE ...]] [--only MODULE_PATH [MODULE_PATH ...]]                  [--externals] [--reverse] [--rankdir {TB,BT,LR,RL}] [--cluster]                  [--min-cluster-size INT] [--max-cluster-size INT]                  [--keep-target-cluster] [--collapse-target-cluster]                  [--rmprefix PREFIX [PREFIX ...]] [--dot-output FILENAME]                  [--deps-output FILENAME]                  fnamepositional arguments:  fname                 filenameoptional arguments:  -h, --help                             show this help message and exit  --config FILE                          specify config file  --no-config                            disable processing of config files  --version                              print pydeps version  -L LOG, --log LOG                      set log-level to one of CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET.  -v, --verbose                          be more verbose (-vv, -vvv for more verbosity)  -o file                                write output to 'file'  -T FORMAT                              output format (svg|png)  --display PROGRAM                      program to use to display the graph (png or svg file depending on the T parameter)  --noshow                               don't call external program to display graph  --show-deps                            show output of dependency analysis  --show-raw-deps                        show output of dependency analysis before removing skips  --deps-output                          write output of dependency analysis to file (instead of screen)  --show-dot                             show output of dot conversion  --dot-output                           write dot code to file (instead of screen)  --nodot                                skip dot conversion  --no-output                            don't create .svg/.png file, implies --no-show (-t/-o will be ignored)  --show-cycles                          show only import cycles  --debug                                turn on all the show and verbose options (mainly for debugging pydeps itself)  --noise-level INT                      exclude sources or sinks with degree greater than noise-level  --max-bacon INT                        exclude nodes that are more than n hops away (default=2, 0 -&gt; infinite)  --pylib                                include python std lib modules  --pylib-all                            include python all std lib modules (incl. C modules)  --include-missing                      include modules that are not installed (or can't be found on sys.path)  --only MODULE_PATH                     only include modules that start with MODULE_PATH, multiple paths can be provided  --externals                            create list of direct external dependencies  --reverse                              draw arrows to (instead of from) imported modules  --rankdir                              set the direction of the graph, legal values are TB (default, imported modules above importing modules), BT (opposite direction of TB), LR (left-to-right) and RL (right-to-left)  --cluster                              draw external dependencies as separate clusters  --min-cluster-size INT                 the minimum number of nodes a dependency must have before being clustered (default=0)  --max-cluster-size INT                 the maximum number of nodes a dependency can have before the cluster is collapsed to a single node (default=0)  --keep-target-cluster                  draw target module as a cluster  --collapse-target-cluster              collapse target module (this implies --cluster)  --rmprefix PREFIX                      remove PREFIX from the displayed name of the nodes (multiple prefixes can be provided)  -x PATTERN, --exclude PATTERN          input files to skip (e.g. `foo.*`), multiple patterns can be provided  --exclude-exact MODULE                 (shorthand -xx MODULE) same as --exclude, except requires the full match. `-xx foo.bar` will exclude foo.bar, but not foo.bar.blob**Note:** if an option with a variable number of arguments (like ``-x``) is providedbefore ``fname``, separe the arguments from the filename with ``--`` otherwise ``fname``will be parsed as an argument of the option. Example: ``$ pydeps -x os sys -- pydeps``.You can of course also import ``pydeps`` from Python and use it as a library, look in``tests/test_relative_imports.py`` for examples.Example-------This is the result of running ``pydeps`` on itself (``pydeps pydeps``):.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps.svg?sanitize=true(full disclosure: this is for an early version of pydeps)Notes-----------pydeps finds imports by looking for import-opcodes inpython bytecodes (think `.pyc` files). Therefore, only imported fileswill be found (ie. pydeps will not look at files in your directory thatare not imported). Additionally, only files that can be found usingthe Python import machinery will be considered (ie. if a module ismissing or not installed, it will not be included regardless if it isbeing imported). This can be modified by using the ``--include-missing``flag.**Displaying the graph:**To display the resulting ``.svg`` or ``.png`` files, ``pydeps`` by defaultcalls an appropriate opener for the platform, like ``xdg-open foo.svg``.This can be overridden with the ``--display PROGRAM`` option, where ``PROGRAM`` is anexecutable that can display the image file of the graph.You can also export the name of such a viewer in either the ``PYDEPS_DISPLAY``or ``BROWSER`` environment variable, which changes the default behaviourwhen ``--display`` is not used..pydeps-------All options can also be set in a ``.pydeps`` file using ``.ini`` filesyntax (parsable by ``ConfigParser``). Command line options overrideoptions in the ``.pydeps`` file in the current directory, which againoverrides options in the user's home directory(``%USERPROFILE%\.pydeps`` on Windows and ``${HOME}/.pydeps``otherwise).An example .pydeps file::    [pydeps]    max_bacon = 2    no_show = True    verbose = 0    pylib = False    exclude =        os        re        sys        collections        __future__Bacon (Scoring)---------------``pydeps`` also contains an Erd≈ës-like scoring function (a.k.a. Baconnumber, from Six degrees of Kevin Bacon(http://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon) that letsyou filter out modules that are more than a given number of 'hops'away from the module you're interested in.  This is useful for findingthe interface a module has to the rest of the world.To find pydeps' interface to the Python stdlib (less some very commonmodules).::    shell&gt; pydeps pydeps --show --max-bacon 2 --pylib -x os re types _* enum.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-pylib.svg?sanitize=true``--max-bacon 2`` (the default) gives the modules that are at most 2hops away, and modules that belong together have similar colors.Compare that to the output with the ``--max-bacon=0`` (infinite)filter:.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-pylib-all.svg?sanitize=true   :width: 40%Import cycles-------------``pydeps`` can detect and display cycles with the ``--show-cycles``parameter.  This will _only_ display the cycles, and for big librariesit is not a particularly fast operation.  Given a folder with thefollowing contents (this uses yaml to define a directory structure,like in the tests)::        relimp:            - __init__.py            - a.py: |                from . import b            - b.py: |                from . import a``pydeps relimp --show-cycles`` displays:.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-cycle.svg?sanitize=true.. _clustering-externals:Clustering externals--------------------Running `pydeps pydeps --max-bacon=4` on version 1.8.0 of pydeps gives the following graph:.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4.svg?sanitize=trueIf you are not interested in the internal structure of external modules, you can add the ``--cluster`` flag, whichwill collapse external modules into folder-shaped objects::    shell&gt; pydeps pydeps --max-bacon=4 --cluster.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster.svg?sanitize=trueTo see the internal structure _and_ delineate external modules, use the ``--max-cluster-size`` flag, which controlshow many nodes can be in a cluster before it is collapsed to a folder icon::    shell&gt; pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=1000.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max1000.svg?sanitize=trueor, using a smaller max-cluster-size::    shell&gt; pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max3.svg?sanitize=trueTo remove clusters with too few nodes, use the ``--min-cluster-size`` flag::    shell&gt; pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3 --min-cluster-size=2.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max3-min2.svg?sanitize=trueIn some situations it can be useful to draw the target module as a cluster::    shell&gt; pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3 --min-cluster-size=2 --keep-target-cluster.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-18-bacon4-cluster-max3-min2-keep-target.svg?sanitize=true..and since the cluster boxes include the module name, we can remove those prefixes::    shell&gt; pydeps pydeps --max-bacon=4 --cluster --max-cluster-size=3 --min-cluster-size=2 --keep-target-cluster --rmprefix pydeps. stdlib_list... image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rmprefix.svg?sanitize=trueGraph direction---------------The direction of the graph can be specified using the ``--rankdir`` flag.Top to bottom (default)::    shell&gt; pydeps pydeps --rankdir TB.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-tb.svg?sanitize=trueBottom to top::    shell&gt; pydeps pydeps --rankdir BT.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-bt.svg?sanitize=trueLeft to right::    shell&gt; pydeps pydeps --rankdir LR.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-lr.svg?sanitize=trueRight to left::    shell&gt; pydeps pydeps --rankdir RL.. image:: https://raw.githubusercontent.com/thebjorn/pydeps/master/docs/_static/pydeps-rankdir-rl.svg?sanitize=trueCollapsing target package-------------------------When internal target package dependencies are unimportant, they can be collapsed using the ``--collapse-target-cluster`` flag. This option also implies ``--cluster``::    shell&gt; pydeps pydeps --collapse-target-cluster.. image:: https://raw.githubusercontent.com/mlga/pydeps/collapse-target/docs/_static/pydeps-collapse-target-cluster.svg?sanitize=trueIntermediate format-------------------An attempt has been made to keep the intermediate formats readable,eg. the output from ``pydeps --show-deps ..`` looks like this::    ...    &quot;pydeps.mf27&quot;: {        &quot;imported_by&quot;: [            &quot;__main__&quot;,            &quot;pydeps.py2depgraph&quot;        ],        &quot;kind&quot;: &quot;imp.PY_SOURCE&quot;,        &quot;name&quot;: &quot;pydeps.mf27&quot;,        &quot;path&quot;: &quot;pydeps\\mf27.py&quot;    },    &quot;pydeps.py2depgraph&quot;: {        &quot;imported_by&quot;: [            &quot;__main__&quot;,            &quot;pydeps.pydeps&quot;        ],        &quot;imports&quot;: [            &quot;pydeps.depgraph&quot;,            &quot;pydeps.mf27&quot;        ],        &quot;kind&quot;: &quot;imp.PY_SOURCE&quot;,        &quot;name&quot;: &quot;pydeps.py2depgraph&quot;,        &quot;path&quot;: &quot;pydeps\\py2depgraph.py&quot;    }, ...Version history---------------**Version 1.11.0** drop support for Python 3.6.Thanks to pawamoy_ for removing imports of the deprecated ``imp`` module.(Parts of it has been vendorized due to a Python bug, see the code for details.)**Version 1.10.1** Thanks to vector400_ for a new option ``--rankdir`` whichrenders the graph in different directions.**Version 1.10.0** supports Python 3.10.**Version 1.9.15** Thanks to `Pipeline Foundation`_ for a very much improved CIpipeline, and a CD pipeline as well.**Version 1.9.14** Thanks to poneill_ for fixing a cryptic error message whenrun in a directory without an ``__init__.py`` file.**Version 1.9.13** Thanks to glumia_ and SimonBiggs_ for improving the documentation.**Version 1.9.10** ``no_show`` is now honored when placed in ``.pydeps`` file.Thanks to romain-dartigues_ for the PR.**Version 1.9.8** Fix for ``maximum recursion depth exceeded`` when using largeframeworks (like ``sympy``).  Thanks to tanujkhattar_ for finding the fix and tobalopat_ for reporting it.**Version 1.9.7** Check ``PYDEPS_DISPLAY`` and ``BROWSER`` for a program to openthe graph, PR by jhermann_..    **Version 1.9.4** pydeps is now available as a pre-commit.com hook thanks to    a PR by ewen-lbh_**Version 1.9.1** graphs are now stable on Python 3.x as well -this was already the case for Py2.7 (thanks to pawamoy_ for reportingand testing the issue and to kinow_ for helping with testing).**Version 1.9.0** supports Python 3.8.**Version 1.8.7** includes a new flag ``--rmprefix`` which lets you removeprefixes from the node-labels in the graph. The _name_ of the nodes are not effectedso this does not cause merging of nodes, nor does it change coloring - but itcan lead to multiple nodes with the same label (hovering over the node willgive the full name). Thanks to  aroberge_ for the enhancement request.**Version 1.8.5** With svg as the output format (which is the default),paths are now hilighted on mouse hover (thanks to tomasito665_ for theenhancement request).**Version 1.8.2** incldes a new flag ``--only`` that causes pydeps toonly report on the paths specified::    shell&gt; pydeps mypackage --only mypackage.a mypackage.b**Version 1.8.0** includes 4 new flags for drawing external dependencies asclusters. See clustering-externals_ for examples.Additionally, the arrowheads now have the color of the source node.**Version 1.7.3** includes a new flag ``-xx`` or ``--exclude-exact`` whichmatches the functionality of the ``--exclude`` flag, except it requires anexact match, i.e. ``-xx foo.bar`` will exclude foo.bar, but not``foo.bar.blob`` (thanks to AvenzaOleg_ for the PR).**Version 1.7.2** includes a new flag, ``--no-output``, which preventscreation of the .svg/.png file.**Version 1.7.1** fixes excludes in .pydeps files (thanks to eqvis_for the bug report).**Version 1.7.0** The new ``--reverse`` flag reverses the directionof the arrows in the dependency graph, so they point _to_ the importedmodule instead of _from_ the imported module (thanks to goetzk_ forthe bug report and tobiasmaier_ for the PR!).**Version 1.5.0** Python 3 support (thanks to eight04_ for the PR).**Version 1.3.4** ``--externals`` will now include modules thathaven't been installed (what ``modulefinder`` calls ``badmodules``).**Version 1.2.8** A shortcut for finding the direct external dependenciesof a package was added::    pydeps --externals mypackagewhich will print a json formatted list of module names to the screen, e.g.::    (dev) go|c:\srv\lib\dk-tasklib&gt; pydeps --externals dktasklib    [        &quot;dkfileutils&quot;    ]which means that the ``dktasklib`` package only depends on the ``dkfileutils``package.This functionality is also available programmatically::    import os    from pydeps.pydeps import externals    # the directory that contains setup.py (one level up from actual package):    os.chdir('package-directory')    print externals('mypackage')**Version 1.2.5:** The defaults are now sensible, such that::    shell&gt; pydeps mypackagewill likely do what you want. It is the same as``pydeps --show --max-bacon=2 mypackage`` which means display thedependency graph in your browser, but limit it to two hops (whichincludes only the modules that your module imports -- not continuingdown the import chain).  The old default behavior is available with``pydeps --noshow --max-bacon=0 mypackage``.Contributing------------#. Fork it#. It is appreciated (but not required) if you raise an issue first: https://github.com/thebjorn/pydeps/issues#. Create your feature branch (`git checkout -b my-new-feature`)#. Commit your changes (`git commit -am 'Add some feature'`)#. Push to the branch (`git push origin my-new-feature`)#. Create new Pull Request.. _Graphviz: http://www.graphviz.org/download/.. _AvenzaOleg: https://github.com/avenzaoleg.. _eqvis: https://github.com/eqvis.. _goetzk: https://github.com/goetzk.. _tobiasmaier: https://github.com/tobiasmaier.. _eight04: https://github.com/eight04.. _tomasito665: https://github.com/Tomasito665.. _aroberge: https://github.com/aroberge.. _pawamoy: https://github.com/pawamoy.. _kinow: https://github.com/kinow.. _ewen-lbh: https://github.com/ewen-lbh.. _jhermann: https://github.com/jhermann.. _balopat: https://github.com/balopat.. _tanujkhattar: https://github.com/tanujkhattar.. _romain-dartigues: https://github.com/romain-dartigues.. _glumia: https://github.com/glumia.. _SimonBiggs: https://github.com/SimonBiggs.. _poneill: https://github.com/poneill.. _Pipeline Foundation: https://pipeline.foundation.. _vector400: https://github.com/vector400.. _pawamoy: https://github.com/pawamoy</longdescription>
</pkgmetadata>